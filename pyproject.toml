[tool.poetry]
name = "kronos"
version = "0.0.0"  # Semantic versioning number automatically incremented through tagging
description = "Parses event scheduling information in an arbitrarily structured google sheet"
authors = ["Yifei Yu"]
readme = "README.md"
packages = [
    { include = "kronos", from = "src" }
]
include = [
    { path = "src/kronos/conf_default", format = "sdist" },
    { path = "notebooks", format = "sdist" }
]

[tool.poetry.dependencies]
python = "~3.10"
orjson = "^3.9.14"
dacite = "^1.8.1"
python-dotenv = "^1.0.1"
pandas = "^2.2.0"
gspread = "^6.0.2"

[tool.poetry.group.dev.dependencies]
isort = "^5.13.2"
pytest = "^8.0.1"
mypy = "^1.8.0"
flake8 = "^7.0.0"
coverage = {extras = ["toml"], version = "^7.4.1"}
black = "^24.2.0"
yamllint = "^1.35.1"
semgrep = "^1.61.1"
ipykernel = "^6.29.2"
nbformat = "^5.9.2"
ruff = "^0.2.1"
shellcheck-py = "^0.9.0.6"
pandas-stubs = "^2.2.0.240218"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
force-exclude = '''
.*/setup\.py$
'''

[tool.isort]
profile = "black"
line_length = 88
src_paths = ["src", "tests"]
extend_skip = ["setup.py"]

[tool.pytest.ini_options]
log_cli = true
log_cli_level = "DEBUG"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
addopts = "--junitxml=test_report.xml"
testpaths = "tests"

[tool.mypy]
files = "src"
mypy_path = "src"
exclude = [
    ".venv"
]
namespace_packages = true
explicit_package_bases = true
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "gspread.*"
]
ignore_missing_imports = true
warn_return_any = false

[tool.coverage.paths]
source = ["src", "*/site-packages"]

[tool.coverage.run]
branch = true
source = ["src"]

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 50
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    '''if self\.debug''',

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    '''@(abc\.)?abstractmethod''',
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"
